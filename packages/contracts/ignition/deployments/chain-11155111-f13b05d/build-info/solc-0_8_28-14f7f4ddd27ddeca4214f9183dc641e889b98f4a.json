{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-14f7f4ddd27ddeca4214f9183dc641e889b98f4a",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/BarangayChain.sol": "project/contracts/BarangayChain.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/manager/AccessManaged.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/AccessManaged.sol)\n\npragma solidity ^0.8.20;\n\nimport {AuthorityUtils} from \"./AuthorityUtils.sol\";\nimport {IAccessManager} from \"./IAccessManager.sol\";\nimport {IAccessManaged} from \"./IAccessManaged.sol\";\nimport {Context} from \"../../utils/Context.sol\";\n\n/**\n * @dev This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be\n * permissioned according to an \"authority\": a contract like {AccessManager} that follows the {IAuthority} interface,\n * implementing a policy that allows certain callers to access certain functions.\n *\n * IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public`\n * functions, and ideally only used in `external` functions. See {restricted}.\n */\nabstract contract AccessManaged is Context, IAccessManaged {\n    address private _authority;\n\n    bool private _consumingSchedule;\n\n    /**\n     * @dev Initializes the contract connected to an initial authority.\n     */\n    constructor(address initialAuthority) {\n        _setAuthority(initialAuthority);\n    }\n\n    /**\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\n     * caller and selector of the function that entered the contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\n     * ====\n     *\n     * [WARNING]\n     * ====\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\n     * functions are the only execution paths where a function selector cannot be unambiguously determined from the calldata\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\n     * if no calldata is provided. (See {_checkCanCall}).\n     *\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\n     * ====\n     */\n    modifier restricted() {\n        _checkCanCall(_msgSender(), _msgData());\n        _;\n    }\n\n    /// @inheritdoc IAccessManaged\n    function authority() public view virtual returns (address) {\n        return _authority;\n    }\n\n    /// @inheritdoc IAccessManaged\n    function setAuthority(address newAuthority) public virtual {\n        address caller = _msgSender();\n        if (caller != authority()) {\n            revert AccessManagedUnauthorized(caller);\n        }\n        if (newAuthority.code.length == 0) {\n            revert AccessManagedInvalidAuthority(newAuthority);\n        }\n        _setAuthority(newAuthority);\n    }\n\n    /// @inheritdoc IAccessManaged\n    function isConsumingScheduledOp() public view returns (bytes4) {\n        return _consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\n    }\n\n    /**\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\n     * permissions set by the current authority.\n     */\n    function _setAuthority(address newAuthority) internal virtual {\n        _authority = newAuthority;\n        emit AuthorityUpdated(newAuthority);\n    }\n\n    /**\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\n     * is less than 4 bytes long.\n     */\n    function _checkCanCall(address caller, bytes calldata data) internal virtual {\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\n            authority(),\n            caller,\n            address(this),\n            bytes4(data[0:4])\n        );\n        if (!immediate) {\n            if (delay > 0) {\n                _consumingSchedule = true;\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\n                _consumingSchedule = false;\n            } else {\n                revert AccessManagedUnauthorized(caller);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/manager/AuthorityUtils.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/manager/AuthorityUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAuthority} from \"./IAuthority.sol\";\n\nlibrary AuthorityUtils {\n    /**\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\n     */\n    function canCallWithDelay(\n        address authority,\n        address caller,\n        address target,\n        bytes4 selector\n    ) internal view returns (bool immediate, uint32 delay) {\n        bytes memory data = abi.encodeCall(IAuthority.canCall, (caller, target, selector));\n\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x00)\n            mstore(0x20, 0x00)\n\n            if staticcall(gas(), authority, add(data, 0x20), mload(data), 0x00, 0x40) {\n                immediate := mload(0x00)\n                delay := mload(0x20)\n\n                // If delay does not fit in a uint32, return 0 (no delay)\n                // equivalent to: if gt(delay, 0xFFFFFFFF) { delay := 0 }\n                delay := mul(delay, iszero(shr(32, delay)))\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/manager/IAccessManaged.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAccessManaged.sol)\n\npragma solidity >=0.8.4;\n\ninterface IAccessManaged {\n    /**\n     * @dev Authority that manages this contract was updated.\n     */\n    event AuthorityUpdated(address authority);\n\n    error AccessManagedUnauthorized(address caller);\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\n    error AccessManagedInvalidAuthority(address authority);\n\n    /**\n     * @dev Returns the current authority.\n     */\n    function authority() external view returns (address);\n\n    /**\n     * @dev Transfers control to a new authority. The caller must be the current authority.\n     */\n    function setAuthority(address) external;\n\n    /**\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\n     * attacker controlled calls.\n     */\n    function isConsumingScheduledOp() external view returns (bytes4);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/manager/IAccessManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAccessManager.sol)\n\npragma solidity >=0.8.4;\n\ninterface IAccessManager {\n    /**\n     * @dev A delayed operation was scheduled.\n     */\n    event OperationScheduled(\n        bytes32 indexed operationId,\n        uint32 indexed nonce,\n        uint48 schedule,\n        address caller,\n        address target,\n        bytes data\n    );\n\n    /**\n     * @dev A scheduled operation was executed.\n     */\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev A scheduled operation was canceled.\n     */\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev Informational labelling for a roleId.\n     */\n    event RoleLabel(uint64 indexed roleId, string label);\n\n    /**\n     * @dev Emitted when `account` is granted `roleId`.\n     *\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\n     * otherwise it indicates the execution delay for this account and roleId is updated.\n     */\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\n\n    /**\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\n     */\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\n\n    /**\n     * @dev Role acting as admin over a given `roleId` is updated.\n     */\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\n\n    /**\n     * @dev Role acting as guardian over a given `roleId` is updated.\n     */\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\n\n    /**\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\n     */\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\n\n    /**\n     * @dev Target mode is updated (true = closed, false = open).\n     */\n    event TargetClosed(address indexed target, bool closed);\n\n    /**\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\n     */\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\n\n    /**\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\n     */\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\n\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\n    error AccessManagerNotScheduled(bytes32 operationId);\n    error AccessManagerNotReady(bytes32 operationId);\n    error AccessManagerExpired(bytes32 operationId);\n    error AccessManagerLockedRole(uint64 roleId);\n    error AccessManagerBadConfirmation();\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\n    error AccessManagerUnauthorizedConsume(address target);\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\n\n    /**\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\n     * & {execute} workflow.\n     *\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\n     * for future execution.\n     *\n     * If `allowed` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\n     * the operation can be executed if and only if delay is greater than 0.\n     *\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\n     *\n     * NOTE: This function does not report the permissions of the admin functions in the manager itself. These are defined by the\n     * {AccessManager} documentation.\n     */\n    function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) external view returns (bool allowed, uint32 delay);\n\n    /**\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\n     *\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\n     * disabling any scheduling usage.\n     */\n    function expiration() external view returns (uint32);\n\n    /**\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\n     * accidental increase). Defaults to 5 days.\n     */\n    function minSetback() external view returns (uint32);\n\n    /**\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\n     *\n     * NOTE: When the manager itself is closed, admin functions are still accessible to avoid locking the contract.\n     */\n    function isTargetClosed(address target) external view returns (bool);\n\n    /**\n     * @dev Get the role required to call a function.\n     */\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\n\n    /**\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\n     */\n    function getTargetAdminDelay(address target) external view returns (uint32);\n\n    /**\n     * @dev Get the id of the role that acts as an admin for the given role.\n     *\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\n     * an operation that is restricted to this role.\n     */\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role that acts as a guardian for a given role.\n     *\n     * The guardian permission allows canceling operations that have been scheduled under the role.\n     */\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role current grant delay.\n     *\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\n     */\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\n\n    /**\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\n     * level.\n     *\n     * Returns:\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\n     * [1] Current execution delay for the account.\n     * [2] Pending execution delay for the account.\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\n     */\n    function getAccess(\n        uint64 roleId,\n        address account\n    ) external view returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect);\n\n    /**\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\n     */\n    function hasRole(uint64 roleId, address account) external view returns (bool isMember, uint32 executionDelay);\n\n    /**\n     * @dev Give a label to a role, for improved role discoverability by UIs.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleLabel} event.\n     */\n    function labelRole(uint64 roleId, string calldata label) external;\n\n    /**\n     * @dev Add `account` to `roleId`, or change its execution delay.\n     *\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\n     *\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - granted role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleGranted} event.\n     */\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\n\n    /**\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\n     * no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - revoked role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function revokeRole(uint64 roleId, address account) external;\n\n    /**\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\n     * the role this call has no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\n\n    /**\n     * @dev Change admin role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleAdminChanged} event\n     */\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\n\n    /**\n     * @dev Change guardian role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGuardianChanged} event\n     */\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\n\n    /**\n     * @dev Update the delay for granting a `roleId`.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\n\n    /**\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\n     */\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\n\n    /**\n     * @dev Set the delay for changing the configuration of a given target contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\n\n    /**\n     * @dev Set the closed flag for a contract.\n     *\n     * Closing the manager itself won't disable access to admin methods to avoid locking the contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetClosed} event.\n     */\n    function setTargetClosed(address target, bool closed) external;\n\n    /**\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\n     */\n    function getSchedule(bytes32 id) external view returns (uint48);\n\n    /**\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\n     * been scheduled.\n     */\n    function getNonce(bytes32 id) external view returns (uint32);\n\n    /**\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\n     * required for the caller. The special value zero will automatically set the earliest possible time.\n     *\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\n     *\n     * Emits a {OperationScheduled} event.\n     *\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\n     * contract if it is using standard Solidity ABI encoding.\n     */\n    function schedule(\n        address target,\n        bytes calldata data,\n        uint48 when\n    ) external returns (bytes32 operationId, uint32 nonce);\n\n    /**\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\n     * execution delay is 0.\n     *\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\n     *\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\n     */\n    function execute(address target, bytes calldata data) external payable returns (uint32);\n\n    /**\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\n     * operation that is cancelled.\n     *\n     * Requirements:\n     *\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\n     *\n     * Emits a {OperationCanceled} event.\n     */\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\n\n    /**\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\n     *\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\n     * with all the verifications that it implies.\n     *\n     * Emit a {OperationExecuted} event.\n     */\n    function consumeScheduledOp(address caller, bytes calldata data) external;\n\n    /**\n     * @dev Hashing function for delayed operations.\n     */\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\n\n    /**\n     * @dev Changes the authority of a target managed by this manager instance.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     */\n    function updateAuthority(address target, address newAuthority) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/manager/IAuthority.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAuthority.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Standard interface for permissioning originally defined in Dappsys.\n */\ninterface IAuthority {\n    /**\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\n     */\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/BarangayChain.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {AccessManaged} from \"@openzeppelin/contracts/access/manager/AccessManaged.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"./interfaces/IBarangayChain.sol\";\nimport \"./interfaces/ITreasury.sol\";\n\n/**\n * @title BarangayChain\n * @author Barangay Chain Team\n * @notice Main contract for managing barangay projects, vendors, and milestone-based fund releases\n * @dev Implements AccessManaged for role-based access control and integrates with Treasury for fund management\n */\ncontract BarangayChain is IBarangayChain, AccessManaged {\n    // Constants\n    /// @notice Basis point denominator for percentage calculations (100%)\n    uint256 public constant BASIS_POINT = 10000;\n    /// @notice Minimum number of net upvotes required for milestone consensus\n    uint8 public constant QUORUM_VOTES = 5;\n    /// @notice Minimum number of milestones required for a project\n    uint8 public constant MIN_RELEASE_BPS_LENGTH = 3;\n\n    // Immutables\n    /// @notice ERC20 token used for all payments in the system\n    IERC20 public immutable PAYMENT_TOKEN;\n    /// @notice NFT contract representing citizenship in the barangay\n    IERC721 public immutable CITIZEN_NFT;\n    /// @notice Treasury contract managing fund allocation and disbursement\n    ITreasury public immutable TREASURY;\n\n    // State variables\n    /// @notice Counter for tracking the total number of projects created\n    uint256 public projectCounter;\n    /// @notice Counter for tracking the total number of vendors registered\n    uint256 public vendorCounter;\n\n    // Mappings\n    /// @notice Mapping of project ID to Project details\n    mapping(uint256 projectId => Project) public projects;\n    /// @notice Mapping of project ID to total amount of funds released\n    mapping(uint256 projectId => uint256 amount) public amountFundsReleased;\n    /// @notice Mapping of verification key to user's consensus vote (true=upvote, false=downvote)\n    mapping(bytes32 key => bool) private hasVoted;\n    /// @notice Mapping of vendor ID to Vendor details\n    mapping(uint256 vendorId => Vendor) public vendors;\n\n    /**\n     * @notice Initializes the BarangayChain contract\n     * @param authority Address of the AccessManager contract for role-based access control\n     * @param treasury_ Address of the Treasury contract\n     * @param citizenNFT Address of the CitizenNFT contract\n     */\n    constructor(\n        address authority,\n        ITreasury treasury_,\n        IERC721 citizenNFT\n    ) AccessManaged(authority) {\n        TREASURY = treasury_;\n        PAYMENT_TOKEN = IERC20(treasury_.TREASURY_TOKEN());\n        CITIZEN_NFT = citizenNFT;\n    }\n\n    /**\n     * @notice Restricts function access to citizens only (NFT holders)\n     * @dev Reverts if caller doesn't own a CitizenNFT\n     */\n    modifier onlyCitizen() {\n        require(\n            CITIZEN_NFT.balanceOf(msg.sender) > 0,\n            \"BarangayChain: Not a citizen\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Validates that a project exists\n     * @dev Checks if the project has a valid proposer and budget\n     * @param projectId The ID of the project to validate\n     */\n    modifier validateProjectExists(uint256 projectId) {\n        Project memory project = projects[projectId];\n        require(\n            project.proposer != address(0) && project.budget > 0,\n            \"BarangayChain: Project doesn't exists\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Creates a new project with milestone-based fund releases\n     * @dev Only callable by authorized roles. Validates vendor, budget allocation, and release template\n     * @param proposer Address of the project proposer\n     * @param vendorId ID of the vendor assigned to the project\n     * @param budget Total budget for the project in payment tokens\n     * @param category Budget category (Infrastructure, Health, Education, etc.)\n     * @param startDate Unix timestamp for project start\n     * @param endDate Unix timestamp for project end\n     * @param uri Metadata URI for project details\n     * @param releaseBpsTemplate Array of basis points for each milestone (must sum to 10000)\n     * @custom:emits ProjectCreated\n     */\n    function createProject(\n        address proposer,\n        uint256 vendorId,\n        uint256 budget,\n        ITreasury.Category category,\n        uint64 startDate,\n        uint64 endDate,\n        string memory uri,\n        uint16[] memory releaseBpsTemplate\n    ) external restricted {\n        require(\n            releaseBpsTemplate.length >= MIN_RELEASE_BPS_LENGTH,\n            \"BarangayChain::createProject: Too low release bps length\"\n        );\n        require(\n            proposer != address(0),\n            \"BarangayChain::createProject: Invalid proposer address\"\n        );\n        require(\n            startDate < endDate,\n            \"BarangayChain::createProject: Start date should be earlier than end date\"\n        );\n\n        uint256 sum = 0;\n        for (uint8 i = 0; i < releaseBpsTemplate.length; i++) {\n            sum += releaseBpsTemplate[i];\n        }\n\n        require(\n            sum == BASIS_POINT,\n            \"BarangayChain::createProject: Release bps length not equal to 100\"\n        );\n\n        Vendor storage vendor = vendors[vendorId];\n        require(\n            vendor.isWhitelisted,\n            \"BarangayChain::createProject: Vendor not whitelisted\"\n        );\n        require(\n            TREASURY.isWithinAllowableAllocation(category, budget),\n            \"BarangayChain::createProject: Allocation reached for this category\"\n        );\n\n        projectCounter++;\n\n        Project storage project = projects[projectCounter];\n        uint256 advancePayment = (budget * releaseBpsTemplate[0]) / BASIS_POINT;\n\n        project.proposer = proposer;\n        project.vendorId = vendorId;\n        project.startDate = startDate;\n        project.endDate = endDate;\n        project.milestoneCount = uint8(releaseBpsTemplate.length);\n        project.advancePayment = advancePayment;\n        project.budget = budget;\n        project.category = category;\n        project.currentMilestone = 0;\n        project.metadataURI = uri;\n\n        // @dev: The releaseBps assignment shifts payment timing to ensure proper fund distribution:\n        // - Milestone 0 gets paid upfront (advance payment calculated above)\n        // - Milestones 1 to N-2 get paid when completed using the NEXT milestone's percentage\n        // - Milestone N-1 (second to last) gets 0% when completed\n        // - Milestone N (last) gets its own percentage when completed (final payment)\n        for (uint8 i = 0; i < releaseBpsTemplate.length; i++) {\n            uint16 releaseBps = 0;\n\n            if (i == releaseBpsTemplate.length - 1) {\n                releaseBps = releaseBpsTemplate[i];\n            } else if (i == releaseBpsTemplate.length - 2) {\n                releaseBps = 0;\n            } else {\n                releaseBps = releaseBpsTemplate[i + 1];\n            }\n\n            project.milestones.push(\n                Milestone({\n                    upvotes: 0,\n                    downvotes: 0,\n                    metadataURI: \"\",\n                    releaseBps: releaseBps,\n                    index: i,\n                    status: MilestoneStatus.Pending,\n                    isReleased: false\n                })\n            );\n        }\n\n        vendor.totalDisbursement += advancePayment;\n        amountFundsReleased[projectCounter] += advancePayment;\n\n        TREASURY.releaseFunds(vendor.walletAddress, advancePayment, category);\n\n        emit ProjectCreated(\n            projectCounter,\n            proposer,\n            vendorId,\n            advancePayment,\n            budget,\n            category,\n            startDate,\n            endDate,\n            uint8(releaseBpsTemplate.length),\n            uri\n        );\n    }\n\n    /**\n     * @notice Submits a milestone for verification\n     * @dev Only the assigned vendor can submit milestones. Must be within project timeframe\n     * @param projectId ID of the project\n     * @param uri Metadata URI containing milestone deliverables\n     * @custom:emits MilestoneSubmitted\n     */\n    function submitMilestone(\n        uint256 projectId,\n        string memory uri\n    ) external validateProjectExists(projectId) {\n        Project storage project = projects[projectId];\n        Vendor memory vendor = vendors[project.vendorId];\n\n        require(\n            vendor.isWhitelisted,\n            \"BarangayChain::submitMilestone: Vendor not whitelisted\"\n        );\n        require(\n            vendor.walletAddress == msg.sender,\n            \"BarangayChain::submitMilestone: Only assigned vendor\"\n        );\n        require(\n            _isWithinTimeframe(project.startDate, project.endDate),\n            \"BarangayChain::submitMilestone: Already due\"\n        );\n\n        uint8 index = project.currentMilestone;\n        Milestone storage milestone = project.milestones[index];\n\n        require(\n            milestone.status == MilestoneStatus.Pending,\n            \"BarangayChain::submitMilestone: Invalid status\"\n        );\n\n        milestone.status = MilestoneStatus.ForVerification;\n        milestone.metadataURI = uri;\n\n        emit MilestoneSubmitted(projectId, index, msg.sender, uri);\n    }\n\n    /**\n     * @notice Allows citizens to vote on milestone verification\n     * @dev Only citizens (NFT holders) can vote. Each citizen can vote once per milestone\n     * @param projectId ID of the project\n     * @param consensus true for approval (upvote), false for rejection (downvote)\n     * @custom:emits MilestoneVerified\n     */\n    function verifyMilestone(\n        uint256 projectId,\n        bool consensus\n    ) external validateProjectExists(projectId) onlyCitizen {\n        Project storage project = projects[projectId];\n\n        require(\n            _isWithinTimeframe(project.startDate, project.endDate),\n            \"BarangayChain::verifyMilestone: Already due\"\n        );\n\n        uint8 index = project.currentMilestone;\n        Milestone storage milestone = project.milestones[index];\n\n        require(\n            milestone.status == MilestoneStatus.ForVerification,\n            \"BarangayChain::verifyMilestone: Invalid status\"\n        );\n\n        bytes32 verificationKey = _packKey(projectId, index, msg.sender);\n        require(\n            !hasVoted[verificationKey],\n            \"BarangayChain::verifyMilestone: Already verified\"\n        );\n\n        if (consensus) {\n            milestone.upvotes = milestone.upvotes + 1;\n        } else {\n            milestone.downvotes = milestone.downvotes + 1;\n        }\n\n        hasVoted[verificationKey] = true;\n\n        emit MilestoneVerified(\n            projectId,\n            index,\n            msg.sender,\n            consensus,\n            milestone.upvotes,\n            milestone.downvotes\n        );\n    }\n\n    /**\n     * @notice Completes a milestone and releases funds if consensus is reached\n     * @dev Only callable by authorized roles. Requires quorum of votes for consensus\n     * @param projectId ID of the project\n     * @custom:emits MilestoneCompleted\n     */\n    function completeMilestone(\n        uint256 projectId\n    ) external validateProjectExists(projectId) restricted {\n        Project storage project = projects[projectId];\n\n        require(\n            _isWithinTimeframe(project.startDate, project.endDate),\n            \"BarangayChain::completeMilestone: Already due\"\n        );\n\n        uint8 currentMilestone = project.currentMilestone;\n        Milestone storage milestone = project.milestones[currentMilestone];\n\n        require(\n            milestone.status == MilestoneStatus.ForVerification,\n            \"BarangayChain::completeMilestone: Invalid status\"\n        );\n\n        bool consensus = milestone.upvotes > milestone.downvotes\n            ? milestone.upvotes - milestone.downvotes >= QUORUM_VOTES\n            : false;\n\n        require(\n            consensus,\n            \"BarangayChain::completeMilestone: Consensus required\"\n        );\n\n        milestone.status = MilestoneStatus.Done;\n\n        uint256 payment = (project.budget * milestone.releaseBps) / BASIS_POINT;\n        bool isProjectCompleted = currentMilestone ==\n            project.milestones.length - 1;\n\n        Vendor storage vendor = vendors[project.vendorId];\n\n        if (isProjectCompleted) {\n            vendor.totalProjectsDone++;\n        } else {\n            project.currentMilestone++;\n        }\n\n        if (payment > 0) {\n            amountFundsReleased[projectId] += payment;\n            vendor.totalDisbursement += payment;\n            milestone.isReleased = true;\n\n            TREASURY.releaseFunds(\n                vendor.walletAddress,\n                payment,\n                project.category\n            );\n        }\n\n        emit MilestoneCompleted(\n            projectId,\n            currentMilestone,\n            payment,\n            isProjectCompleted\n        );\n    }\n\n    /**\n     * @notice Registers a new vendor in the system\n     * @dev Only callable by authorized roles. Creates a new vendor with whitelisted status\n     * @param walletAddress Address of the vendor's wallet\n     * @param uri Metadata URI containing vendor information\n     * @custom:emits VendorAdded\n     */\n    function addVendor(\n        address walletAddress,\n        string memory uri\n    ) external restricted {\n        require(\n            walletAddress != address(0),\n            \"BarangayChain::addVendor: Invalid wallet address\"\n        );\n\n        vendorCounter++;\n        vendors[vendorCounter] = Vendor({\n            walletAddress: walletAddress,\n            metadataURI: uri,\n            isWhitelisted: true,\n            totalProjectsDone: 0,\n            totalDisbursement: 0\n        });\n\n        emit VendorAdded(vendorCounter, walletAddress);\n    }\n\n    /**\n     * @notice Updates the whitelist status of a vendor\n     * @dev Only callable by authorized roles. Controls whether a vendor can be assigned to new projects\n     * @param vendorId ID of the vendor\n     * @param status true to whitelist, false to blacklist\n     * @custom:emits SetVendorWhitelist\n     */\n    function setVendorWhitelist(\n        uint256 vendorId,\n        bool status\n    ) external restricted {\n        Vendor storage vendor = vendors[vendorId];\n\n        require(\n            vendor.walletAddress != address(0),\n            \"BarangayChain::setVendorWhitelist: Vendor not added\"\n        );\n\n        vendor.isWhitelisted = status;\n\n        emit SetVendorWhitelist(vendorId, status);\n    }\n\n    /**\n     * @notice Retrieves details of a specific milestone\n     * @param projectId ID of the project\n     * @param milestoneIdx Index of the milestone\n     * @return Milestone struct containing milestone details\n     */\n    function getProjectMilestone(\n        uint256 projectId,\n        uint8 milestoneIdx\n    ) external view returns (Milestone memory) {\n        Project memory project = projects[projectId];\n        return project.milestones[milestoneIdx];\n    }\n\n    /**\n     * @notice Checks if a citizen has voted on a specific milestone\n     * @param projectId ID of the project\n     * @param milestoneIdx Index of the milestone\n     * @param citizen Address of the citizen\n     * @return bool true if citizen has voted (either upvote or downvote), false otherwise\n     */\n    function isUserAlreadyVoted(\n        uint256 projectId,\n        uint8 milestoneIdx,\n        address citizen\n    ) external view returns (bool) {\n        bytes32 verificationKey = _packKey(projectId, milestoneIdx, citizen);\n        return hasVoted[verificationKey];\n    }\n\n    /**\n     * @notice Checks if current timestamp is within the project timeframe\n     * @param startDate Unix timestamp for start date\n     * @param endDate Unix timestamp for end date\n     * @return bool true if current time is within range, false otherwise\n     */\n    function _isWithinTimeframe(\n        uint64 startDate,\n        uint64 endDate\n    ) internal view returns (bool) {\n        return block.timestamp >= startDate && block.timestamp <= endDate;\n    }\n\n    /**\n     * @notice Creates a unique verification key for citizen milestone votes\n     * @param projectId ID of the project\n     * @param milestoneIdx Index of the milestone\n     * @param citizen Address of the citizen\n     * @return bytes32 Hashed key for storing verification status\n     */\n    function _packKey(\n        uint256 projectId,\n        uint8 milestoneIdx,\n        address citizen\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(projectId, milestoneIdx, citizen));\n    }\n}\n"
      },
      "project/contracts/interfaces/IBarangayChain.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"./ITreasury.sol\";\n\n/**\n * @title IBarangayChain\n * @author Barangay Chain Team\n * @notice Interface for the BarangayChain contract\n * @dev Defines events, enums, structs, and function signatures for project and vendor management\n */\ninterface IBarangayChain {\n    // Events\n    /// @notice Emitted when a new project is created\n    event ProjectCreated(\n        uint256 indexed projectId,\n        address indexed proposer,\n        uint256 indexed vendorId,\n        uint256 advancePayment,\n        uint256 budget,\n        ITreasury.Category category,\n        uint64 startDate,\n        uint64 endDate,\n        uint8 milestoneCount,\n        string uri\n    );\n\n    /// @notice Emitted when a milestone is submitted for verification\n    event MilestoneSubmitted(\n        uint256 indexed projectId,\n        uint8 indexed milestoneIndex,\n        address indexed vendor,\n        string uri\n    );\n\n    /// @notice Emitted when a citizen votes on a milestone\n    event MilestoneVerified(\n        uint256 indexed projectId,\n        uint8 indexed milestoneIndex,\n        address indexed voter,\n        bool consensus,\n        uint256 upvotes,\n        uint256 downvotes\n    );\n\n    /// @notice Emitted when a milestone is completed and funds are released\n    event MilestoneCompleted(\n        uint256 indexed projectId,\n        uint8 indexed milestoneIndex,\n        uint256 paymentReleased,\n        bool isProjectCompleted\n    );\n\n    /// @notice Emitted when a new vendor is added\n    event VendorAdded(uint256 indexed vendorId, address indexed walletAddress);\n\n    /// @notice Emitted when a vendor's whitelist status is updated\n    event SetVendorWhitelist(uint256 indexed vendorId, bool status);\n\n    // Enums\n    /**\n     * @notice Status of a project milestone\n     * @param Pending Milestone has not been submitted yet\n     * @param ForVerification Milestone is submitted and awaiting citizen votes\n     * @param Done Milestone is completed and funds released (if applicable)\n     */\n    enum MilestoneStatus {\n        Pending,\n        ForVerification,\n        Done\n    }\n\n    /**\n     * @notice Project data structure\n     * @param proposer Address of the project proposer\n     * @param startDate Unix timestamp for project start\n     * @param endDate Unix timestamp for project end\n     * @param milestoneCount Total number of milestones in the project\n     * @param vendorId ID of the assigned vendor\n     * @param advancePayment Initial payment released to vendor\n     * @param budget Total project budget\n     * @param category Budget category for the project\n     * @param currentMilestone Index of the current active milestone\n     * @param metadataURI URI pointing to project metadata\n     * @param milestones Array of milestone data\n     */\n    struct Project {\n        address proposer;\n        uint64 startDate;\n        uint64 endDate;\n        uint8 milestoneCount;\n        uint256 vendorId;\n        uint256 advancePayment;\n        uint256 budget;\n        ITreasury.Category category;\n        uint8 currentMilestone;\n        string metadataURI;\n        Milestone[] milestones;\n    }\n\n    /**\n     * @notice Milestone data structure\n     * @param upvotes Number of approval votes received\n     * @param downvotes Number of rejection votes received\n     * @param metadataURI URI pointing to milestone deliverables\n     * @param releaseBps Basis points of budget to release upon completion\n     * @param index Milestone index in the project\n     * @param isReleased Whether funds have been released for this milestone\n     * @param status Current status of the milestone\n     */\n    struct Milestone {\n        uint256 upvotes;\n        uint256 downvotes;\n        string metadataURI;\n        uint16 releaseBps;\n        uint8 index;\n        bool isReleased;\n        MilestoneStatus status;\n    }\n\n    /**\n     * @notice Payload for milestone release configuration\n     * @param releaseBps Basis points to release\n     */\n    struct MilestonePayload {\n        uint16 releaseBps;\n    }\n\n    /**\n     * @notice Vendor data structure\n     * @param walletAddress Address of the vendor's wallet\n     * @param metadataURI URI pointing to vendor information\n     * @param isWhitelisted Whether vendor is approved for new projects\n     * @param totalProjectsDone Number of projects completed by vendor\n     * @param totalDisbursement Total amount disbursed to vendor\n     */\n    struct Vendor {\n        address walletAddress;\n        string metadataURI;\n        bool isWhitelisted;\n        uint256 totalProjectsDone;\n        uint256 totalDisbursement;\n    }\n\n    /**\n     * @notice Creates a new project with milestone-based fund releases\n     * @param proposer Address of the project proposer\n     * @param vendorId ID of the vendor assigned to the project\n     * @param budget Total budget for the project\n     * @param category Budget category for the project\n     * @param startDate Unix timestamp for project start\n     * @param endDate Unix timestamp for project end\n     * @param uri Metadata URI for project details\n     * @param releaseBpsTemplate Array of basis points for each milestone\n     */\n    function createProject(\n        address proposer,\n        uint256 vendorId,\n        uint256 budget,\n        ITreasury.Category category,\n        uint64 startDate,\n        uint64 endDate,\n        string memory uri,\n        uint16[] memory releaseBpsTemplate\n    ) external;\n\n    /**\n     * @notice Submits a milestone for verification\n     * @param projectId ID of the project\n     * @param uri Metadata URI containing milestone deliverables\n     */\n    function submitMilestone(uint256 projectId, string memory uri) external;\n\n    /**\n     * @notice Allows citizens to vote on milestone verification\n     * @param projectId ID of the project\n     * @param consensus true for approval, false for rejection\n     */\n    function verifyMilestone(uint256 projectId, bool consensus) external;\n\n    /**\n     * @notice Completes a milestone and releases funds if consensus is reached\n     * @param projectId ID of the project\n     */\n    function completeMilestone(uint256 projectId) external;\n\n    /**\n     * @notice Registers a new vendor in the system\n     * @param walletAddress Address of the vendor's wallet\n     * @param uri Metadata URI containing vendor information\n     */\n    function addVendor(address walletAddress, string memory uri) external;\n\n    /**\n     * @notice Updates the whitelist status of a vendor\n     * @param vendorId ID of the vendor\n     * @param status true to whitelist, false to blacklist\n     */\n    function setVendorWhitelist(uint256 vendorId, bool status) external;\n\n    /**\n     * @notice Retrieves details of a specific milestone\n     * @param projectId ID of the project\n     * @param milestoneIdx Index of the milestone\n     * @return Milestone struct containing milestone details\n     */\n    function getProjectMilestone(\n        uint256 projectId,\n        uint8 milestoneIdx\n    ) external view returns (Milestone memory);\n\n    /**\n     * @notice Checks if a citizen has voted on a specific milestone\n     * @param projectId ID of the project\n     * @param milestoneIdx Index of the milestone\n     * @param citizen Address of the citizen\n     * @return bool true if citizen has voted\n     */\n    function isUserAlreadyVoted(\n        uint256 projectId,\n        uint8 milestoneIdx,\n        address citizen\n    ) external view returns (bool);\n}\n"
      },
      "project/contracts/interfaces/ITreasury.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title ITreasury\n * @author Barangay Chain Team\n * @notice Interface for the Treasury contract\n * @dev Defines events, enums, and function signatures for treasury fund management\n */\ninterface ITreasury {\n    // Events\n    /// @notice Emitted when funds are deposited to the treasury\n    event TreasuryDeposit(\n        address indexed operator,\n        address indexed from,\n        uint256 amount,\n        bytes data\n    );\n\n    /// @notice Emitted when funds are released from the treasury\n    event FundsReleased(address indexed to, uint256 amount, Category category);\n\n    /// @notice Emitted when the protocol address is updated\n    event SetProtocol(address indexed newProtocolAddress);\n\n    /// @notice Emitted when emergency withdrawal is executed\n    event EmergencyWithdraw(address indexed initiator, uint256 amount);\n\n    // Enums\n    /**\n     * @notice Budget categories for fund allocation\n     * @param Infrastructure Roads, bridges, facilities construction\n     * @param Health Medical services, health programs\n     * @param Education Educational programs and scholarships\n     * @param Environment Environmental protection and waste management\n     * @param Livelihood Income-generating projects and skills training\n     * @param Emergency Disaster response and relief operations\n     * @param Administration Operational and administrative expenses\n     * @param CommunityEvents Cultural activities and community gatherings\n     */\n    enum Category {\n        Infrastructure,\n        Health,\n        Education,\n        Environment,\n        Livelihood,\n        Emergency,\n        Administration,\n        CommunityEvents\n    }\n\n    /**\n     * @notice Returns the address of the treasury token\n     * @return address Address of the ERC20 token used for treasury operations\n     */\n    function TREASURY_TOKEN() external view returns (address);\n\n    /**\n     * @notice Releases funds from the treasury to a recipient\n     * @param to Address of the fund recipient\n     * @param amount Amount of tokens to transfer\n     * @param category Budget category for the expense\n     */\n    function releaseFunds(\n        address to,\n        uint256 amount,\n        Category category\n    ) external;\n\n    /**\n     * @notice Withdraws all treasury funds in case of emergency\n     */\n    function emergencyWithdraw() external;\n\n    /**\n     * @notice Returns total expenses for a given category\n     * @param category Budget category to query\n     * @return uint256 Total amount spent in the category\n     */\n    function expenses(Category category) external view returns (uint256);\n\n    /**\n     * @notice Returns allocation percentage for a given category\n     * @param category Budget category to query\n     * @return uint16 Allocation in basis points (e.g., 2800 = 28%)\n     */\n    function allocations(Category category) external view returns (uint16);\n\n    /**\n     * @notice Checks if an expense is within the allowable allocation\n     * @param category Budget category to check\n     * @param amount Amount to be spent\n     * @return bool true if within allocation limit, false otherwise\n     */\n    function isWithinAllowableAllocation(\n        Category category,\n        uint256 amount\n    ) external view returns (bool);\n}\n"
      }
    }
  }
}