{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-0663849810742b3f04ca13780bff0e9ec594a377",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/BarangayChain.sol": "project/contracts/BarangayChain.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/BarangayChain.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"./interfaces/IBarangayChain.sol\";\nimport \"./interfaces/ITreasury.sol\";\n\ncontract BarangayChain is IBarangayChain, AccessControl {\n    // Constants\n    bytes32 public constant OFFICIAL_ROLE = keccak256(\"OFFICIAL_ROLE\");\n    bytes32 public constant VENDOR_ROLE = keccak256(\"VENDOR_ROLE\");\n    uint256 public constant BASIS_POINT = 10000;\n    uint8 public constant QUORUM_VOTES = 5;\n    uint8 public constant MIN_RELEASE_BPS_LENGTH = 3;\n\n    // Immutables\n    IERC20 public immutable PAYMENT_TOKEN;\n    IERC721 public immutable CITIZEN_NFT;\n    ITreasury public immutable TREASURY;\n\n    // State variables\n    uint256 public projectCounter;\n\n    mapping(uint256 projectId => Project) public projects;\n    mapping(bytes32 key => bool consensus) private userVerifications;\n\n    constructor(ITreasury treasury_, IERC721 citizenNFT) {\n        TREASURY = treasury_;\n        PAYMENT_TOKEN = IERC20(treasury_.TREASURY_TOKEN());\n        CITIZEN_NFT = citizenNFT;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    modifier onlyOfficial() {\n        require(\n            hasRole(OFFICIAL_ROLE, msg.sender),\n            \"BarangayChain: Not an official\"\n        );\n        _;\n    }\n\n    modifier onlyVendor() {\n        require(\n            hasRole(VENDOR_ROLE, msg.sender),\n            \"BarangayChain: Not a vendor\"\n        );\n        _;\n    }\n\n    modifier onlyCitizen() {\n        require(\n            CITIZEN_NFT.balanceOf(msg.sender) > 0,\n            \"BarangayChain: Not a citizen\"\n        );\n        _;\n    }\n\n    modifier validateProjectExists(uint256 projectId) {\n        Project memory project = projects[projectId];\n        require(\n            project.proposer != address(0) &&\n                project.vendor != address(0) &&\n                project.budget > 0,\n            \"BarangayChain: Project doesn't exists\"\n        );\n        _;\n    }\n\n    function createProject(\n        address proposer,\n        address vendor,\n        uint256 budget,\n        ITreasury.Category category,\n        uint64 startDate,\n        uint64 endDate,\n        string memory uri,\n        uint16[] memory releaseBpsTemplate\n    ) external onlyOfficial {\n        require(\n            releaseBpsTemplate.length >= MIN_RELEASE_BPS_LENGTH,\n            \"BarangayChain::createProject: Too low release bps length\"\n        );\n        require(\n            proposer != address(0),\n            \"BarangayChain::createProject: Invalid proposer address\"\n        );\n        require(\n            vendor != address(0),\n            \"BarangayChain::createProject: Invalid vendor address\"\n        );\n\n        uint256 sum = 0;\n        for (uint8 i = 0; i < releaseBpsTemplate.length; i++) {\n            sum += releaseBpsTemplate[i];\n        }\n\n        require(\n            sum == BASIS_POINT,\n            \"BarangayChain::createProject: Release bps length not equal to 100\"\n        );\n\n        projectCounter++;\n\n        Project storage project = projects[projectCounter];\n        project.proposer = proposer;\n        project.vendor = vendor;\n        project.startDate = startDate;\n        project.endDate = endDate;\n        project.budget = budget;\n        project.category = category;\n        project.currentMilestone = 0;\n        project.metadataURI = uri;\n\n        for (uint8 i = 0; i < releaseBpsTemplate.length; i++) {\n            project.milestones.push(\n                Milestone({\n                    upvotes: 0,\n                    downvotes: 0,\n                    metadataURI: \"\",\n                    releaseBps: releaseBpsTemplate[i],\n                    index: i,\n                    status: MilestoneStatus.Pending\n                })\n            );\n        }\n\n        uint256 advancePayment = (budget * releaseBpsTemplate[0]) / BASIS_POINT;\n        TREASURY.releaseFunds(vendor, advancePayment, category);\n\n        emit ProjectCreated(\n            projectCounter,\n            proposer,\n            vendor,\n            budget,\n            category,\n            startDate,\n            endDate,\n            uri\n        );\n    }\n\n    function submitMilestone(\n        uint256 projectId,\n        string memory uri\n    ) external validateProjectExists(projectId) onlyVendor {\n        Project storage project = projects[projectId];\n\n        require(\n            _isWithinTimeframe(project.startDate, project.endDate),\n            \"BarangayChain::submitMilestone: Already due\"\n        );\n\n        uint8 index = project.currentMilestone;\n        Milestone storage milestone = project.milestones[index];\n\n        require(\n            milestone.status == MilestoneStatus.Pending,\n            \"BarangayChain::submitMilestone: Invalid status\"\n        );\n\n        milestone.status = MilestoneStatus.ForVerification;\n        milestone.metadataURI = uri;\n\n        emit MilestoneSubmitted(projectId, index, msg.sender, uri);\n    }\n\n    function verifyMilestone(\n        uint256 projectId,\n        bool consensus\n    ) external validateProjectExists(projectId) onlyCitizen {\n        Project storage project = projects[projectId];\n\n        require(\n            _isWithinTimeframe(project.startDate, project.endDate),\n            \"BarangayChain::verifyMilestone: Already due\"\n        );\n\n        uint8 index = project.currentMilestone;\n        Milestone storage milestone = project.milestones[index];\n\n        require(\n            milestone.status == MilestoneStatus.ForVerification,\n            \"BarangayChain::verifyMilestone: Invalid status\"\n        );\n\n        bytes32 verificationKey = _packKey(projectId, index, msg.sender);\n        require(\n            !userVerifications[verificationKey],\n            \"BarangayChain::verifyMilestone: Already verified\"\n        );\n\n        if (consensus) {\n            milestone.upvotes = milestone.upvotes + 1;\n        } else {\n            milestone.downvotes = milestone.downvotes + 1;\n        }\n\n        userVerifications[verificationKey] = consensus;\n\n        emit MilestoneVerified(\n            projectId,\n            index,\n            msg.sender,\n            consensus,\n            milestone.upvotes,\n            milestone.downvotes\n        );\n    }\n\n    function completeMilestone(\n        uint256 projectId\n    ) external validateProjectExists(projectId) onlyOfficial {\n        Project storage project = projects[projectId];\n\n        require(\n            _isWithinTimeframe(project.startDate, project.endDate),\n            \"BarangayChain::completeMilestone: Already due\"\n        );\n\n        uint8 currentMilestone = project.currentMilestone;\n        Milestone storage milestone = project.milestones[currentMilestone];\n\n        require(\n            milestone.status == MilestoneStatus.ForVerification,\n            \"BarangayChain::completeMilestone: Invalid status\"\n        );\n\n        bool consensus = milestone.upvotes > milestone.downvotes\n            ? milestone.upvotes - milestone.downvotes >= QUORUM_VOTES\n            : false;\n\n        require(\n            consensus,\n            \"BarangayChain::completeMilestone: Consensus required\"\n        );\n\n        milestone.status = MilestoneStatus.Done;\n\n        uint256 payment = 0;\n        uint8 nextIndex = currentMilestone + 1;\n        bool isProjectCompleted = currentMilestone ==\n            project.milestones.length - 1;\n\n        if (isProjectCompleted) {\n            payment = (project.budget * milestone.releaseBps) / BASIS_POINT;\n        } else {\n            project.currentMilestone = nextIndex;\n        }\n\n        bool isNextMilestone = project.currentMilestone == nextIndex;\n        bool isBeforeCompletionStage = currentMilestone <\n            project.milestones.length - 2;\n\n        if (isNextMilestone && isBeforeCompletionStage) {\n            Milestone memory nextMilestone = project.milestones[nextIndex];\n            payment = (project.budget * nextMilestone.releaseBps) / BASIS_POINT;\n        }\n        if (payment > 0) {\n            TREASURY.releaseFunds(project.vendor, payment, project.category);\n        }\n\n        emit MilestoneCompleted(\n            projectId,\n            currentMilestone,\n            payment,\n            isProjectCompleted\n        );\n    }\n\n    function getProjectMilestone(\n        uint256 projectId,\n        uint8 milestoneIdx\n    ) external view returns (Milestone memory) {\n        Project memory project = projects[projectId];\n        return project.milestones[milestoneIdx];\n    }\n\n    function getUserMilestoneVerification(\n        uint256 projectId,\n        uint8 milestoneIdx,\n        address citizen\n    ) external view returns (bool) {\n        bytes32 verificationKey = _packKey(projectId, milestoneIdx, citizen);\n        return userVerifications[verificationKey];\n    }\n\n    function _isWithinTimeframe(\n        uint64 startDate,\n        uint64 endDate\n    ) internal view returns (bool) {\n        return block.timestamp >= startDate && block.timestamp <= endDate;\n    }\n\n    function _packKey(\n        uint256 projectId,\n        uint8 milestoneIdx,\n        address citizen\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(projectId, milestoneIdx, citizen));\n    }\n}\n"
      },
      "project/contracts/interfaces/IBarangayChain.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport \"./ITreasury.sol\";\n\ninterface IBarangayChain {\n    // Events\n    event ProjectCreated(\n        uint256 indexed projectId,\n        address indexed proposer,\n        address indexed vendor,\n        uint256 budget,\n        ITreasury.Category category,\n        uint64 startDate,\n        uint64 endDate,\n        string uri\n    );\n\n    event MilestoneSubmitted(\n        uint256 indexed projectId,\n        uint8 indexed milestoneIndex,\n        address indexed vendor,\n        string uri\n    );\n\n    event MilestoneVerified(\n        uint256 indexed projectId,\n        uint8 indexed milestoneIndex,\n        address indexed voter,\n        bool consensus,\n        uint256 upvotes,\n        uint256 downvotes\n    );\n\n    event MilestoneCompleted(\n        uint256 indexed projectId,\n        uint8 indexed milestoneIndex,\n        uint256 paymentReleased,\n        bool isProjectCompleted\n    );\n\n    // Enums\n    enum MilestoneStatus {\n        Pending,\n        ForVerification,\n        Done\n    }\n\n    struct Project {\n        address proposer;\n        address vendor;\n        uint64 startDate;\n        uint64 endDate;\n        uint256 budget;\n        ITreasury.Category category;\n        uint8 currentMilestone;\n        string metadataURI;\n        Milestone[] milestones;\n    }\n\n    struct Milestone {\n        uint256 upvotes;\n        uint256 downvotes;\n        string metadataURI;\n        uint16 releaseBps;\n        uint8 index;\n        MilestoneStatus status;\n    }\n\n    struct MilestonePayload {\n        uint16 releaseBps;\n    }\n}\n"
      },
      "project/contracts/interfaces/ITreasury.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\ninterface ITreasury {\n    // Events\n    event TreasuryDeposit(\n        address indexed operator,\n        address indexed from,\n        uint256 amount,\n        bytes data\n    );\n\n    event FundsReleased(address indexed to, uint256 amount, Category category);\n\n    event SetProtocol(address indexed newProtocolAddress);\n\n    // Enums\n    enum Category {\n        Infrastructure,\n        Health,\n        Education,\n        Environment,\n        Livelihood,\n        Emergency,\n        Administration,\n        CommunityEvents\n    }\n\n    function TREASURY_TOKEN() external view returns (address);\n\n    function releaseFunds(\n        address to,\n        uint256 amount,\n        Category category\n    ) external;\n}\n"
      }
    }
  }
}